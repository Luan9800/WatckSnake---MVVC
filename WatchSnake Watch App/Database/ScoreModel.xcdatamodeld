import CloudKit
import SwiftUI
import Foundation

class ScoreManager: ObservableObject {
    @Published var scores: [HighScore] = []
    private var database = CKContainer.default().publicCloudDatabase

    /// üöÄ **Salva um novo score no CloudKit**
    func saveScore(playerName: String, score: Int) {
        let record = CKRecord(recordType: "HighScore")
        record["playerName"] = playerName as CKRecordValue
        record["score"] = score as CKRecordValue
        record["date"] = Date() as CKRecordValue
        
        database.save(record) { _, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå Erro ao salvar score: \(error.localizedDescription)")
                } else {
                    print("‚úÖ Score salvo com sucesso!")
                    self.fetchScores() // Atualiza o ranking ap√≥s salvar
                }
            }
        }
    }

    /// üîÑ **Carrega os scores do CloudKit** (usando API mais recente)
    func fetchScores() {
        let query = CKQuery(recordType: "HighScore", predicate: NSPredicate(value: true))
        query.sortDescriptors = [NSSortDescriptor(key: "score", ascending: false)]

        let operation = CKQueryOperation(query: query)
        operation.resultsLimit = 10 // üî• Define um limite de 10 resultados para performance

        var fetchedScores: [HighScore] = []

        operation.recordMatchedBlock = { recordID, result in
            switch result {
            case .success(let record):
                let highScore = HighScore(record: record)
                fetchedScores.append(highScore)
            case .failure(let error):
                print("‚ùå Erro ao buscar record \(recordID): \(error.localizedDescription)")
            }
        }

        operation.queryResultBlock = { result in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    self.scores = fetchedScores
                case .failure(let error):
                    print("‚ùå Erro ao finalizar busca de scores: \(error.localizedDescription)")
                }
            }
        }

        database.add(operation) // üî• Adiciona a opera√ß√£o no banco de dados
    }
}
